@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer;
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>DEM - Tixxp APP | Login</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="~/assets/images/brand-logos/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="~/assets/libs/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/assets/css/styles.min.css" />
    <link rel="stylesheet" href="~/assets/css/icons.min.css" />
</head>
<body class="authentication-bg">

    <!-- Background Squares -->
    <div class="square-box">
        @for (int i = 0; i < 15; i++) { <div></div> }
    </div>

    <!-- Login Card -->
    <div class="container h-100">
        <div class="row justify-content-center align-items-center h-100">
            <div class="col-12 col-sm-8 col-md-6 col-lg-5 col-xl-4">
                <div class="card custom-card shadow-lg">
                    <div class="card-body p-5">

                        <div class="text-center mb-2">
                            <h1 style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                       font-size: 32px;
                       font-weight: 800;
                       color: #5e35b1;
                       letter-spacing: 2px;
                       margin-bottom: 10px;">
                                TIXXP
                            </h1>
                        </div>

                        <div class="text-center mb-4">
                            <img src="~/assets/images/brand-logos/TixxpLogo.png" alt="Tixxp Logo" style="max-width: 120px;">
                        </div>
                        <h5 class="text-center mb-4 fw-bold">@Localizer["authorization.INDEX.LOGIN.BIG"]</h5>
                        <div class="mb-3">
                            <label for="signin-username" class="form-label">@Localizer["authorization.INDEX.E-Mail"]</label>
                            <input type="text" id="signin-username" class="form-control form-control-lg" placeholder="@Localizer["authorization.INDEX.E-Mail.PlaceHolder"]">
                        </div>

                        <div class="mb-3">
                            <label for="signin-password" class="form-label">@Localizer["authorization.INDEX.PASSWORD"]</label>
                            <div class="input-group">
                                <input type="password" id="signin-password" class="form-control form-control-lg" placeholder="@Localizer["authorization.INDEX.PASSWORD.PlaceHolder"]">
                                <button class="btn btn-light border" type="button" onclick="createpassword('signin-password', this)">
                                    <i class="ri-eye-off-line align-middle"></i>
                                </button>
                            </div>
                            <div class="form-check mt-2 d-flex justify-content-between align-items-center">
                                <div>
                                    <input type="checkbox" class="form-check-input" id="remember-check">
                                    <label class="form-check-label" for="remember-check">@Localizer["authorization.INDEX.Remember.Me"]</label>
                                </div>
                                <a href="/Authorization/ResetPassword" class="text-danger small">@Localizer["authorization.INDEX.Forgot.Password"]</a>
                            </div>
                        </div>

                        <div class="d-grid mt-4">
                            <button id="login-btn" type="button" class="btn btn-primary btn-lg">@Localizer["authorization.INDEX.SignIn.Camel.Case"]</button>
                        </div>
                       @*  <div class="d-grid mt-2">
                            <form action="/Authorization/Logout" method="post">
                                <button type="submit" class="btn btn-outline-danger btn-sm">
                                    <i class="ri-logout-box-line"></i> Çıkış Yap
                                </button>
                            </form>
                        </div> *@
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Toast -->
    <div id="solid-successToast" class="toast fade position-fixed top-0 start-0 m-3 bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <img src="@Url.Content("~/assets/images/brand-logos/toggle-white.png")" class="bd-placeholder-img rounded me-2" alt="logo">
            <strong class="me-auto">Tixxp</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="success-toast-message">Giriş başarılı</div>
    </div>

    <!-- Error Toast -->
    <div id="solid-dangerToast" class="toast fade position-fixed top-0 start-0 m-3 bg-danger text-white" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-danger text-white">
            <img src="@Url.Content("~/assets/images/brand-logos/toggle-white.png")" class="bd-placeholder-img rounded me-2" alt="logo">
            <strong class="me-auto">Tixxp</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="error-toast-message">Giriş başarısız</div>
    </div>

    <!-- Scripts -->
    <script src="~/assets/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/js/show-password.js"></script>
    <script>
        function showToast(type, message, redirectUrl = null) {
            const toastId = type === "success" ? "solid-successToast" : "solid-dangerToast";
            const messageId = type === "success" ? "success-toast-message" : "error-toast-message";

            document.getElementById(messageId).textContent = message;
            const toast = new bootstrap.Toast(document.getElementById(toastId), { delay: 3000 });

            if (redirectUrl) {
                toast._element.addEventListener('hidden.bs.toast', () => {
                    window.location.href = redirectUrl;
                }, { once: true });
            }

            toast.show();
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.getElementById("login-btn").addEventListener("click", async (e) => {
                e.preventDefault();

                const username = document.getElementById("signin-username").value.trim();
                const password = document.getElementById("signin-password").value.trim();

                if (!username || !password) {
                    showToast("error", "Lütfen kullanıcı adı ve şifre giriniz.");
                    return;
                }

                try {
                    const response = await fetch("/Authorization/Login", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ username, password })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showToast("success", result.message || "Giriş başarılı!", result.redirectUrl);
                    } else {
                        showToast("error", result.message || "Giriş başarısız!");
                    }

                } catch (error) {
                    console.error("Login error:", error);
                    showToast("error", "Bir hata oluştu. Lütfen tekrar deneyin.");
                }
            });
        });
    </script>
</body>
</html>
