@model List<Tixxp.WebApp.Models.ProductPrice.ProductWithPriceViewModel>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = @Localizer["productSale.INDEX.PAGE_TITLE"];
}

<div class="page">
    <div class="main-content app-content">
        <div class="container-fluid">
            <div class="row">
                <!-- Cart Items -->
                <div class="col-xxl-9">
                    <div class="card custom-card" id="cart-container-delete">
                        <div class="card-header">
                            <div class="card-title">@Localizer["productSale.INDEX.PRODUCT_ON_SALE"]</div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered text-nowrap">
                                    <thead>
                                        <tr>
                                            <th>@Localizer["productSale.INDEX.PRODUCT_NAME"]</th>
                                            <th>@Localizer["productSale.INDEX.PRODUCT_CODE"]</th>
                                            <th>@Localizer["productSale.INDEX.PRODUCT_PRICE"]</th>
                                            <th>@Localizer["productSale.INDEX.PRODUCT_PIECE"]</th>
                                            <th>@Localizer["productSale.INDEX.TOTAL_PRICE"]</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model)
                                        {
                                            <tr data-product-id="@item.ProductId">
                                                <td>@item.Name</td>
                                                <td>@item.Code</td>
                                                <td>@item.CurrencyTypeSymbol @item.Price</td>
                                                <td>
                                                    <div class="input-group rounded flex-nowrap">
                                                        <button class="btn btn-icon btn-light input-group-text product-quantity-minus"><i class="ri-subtract-line"></i></button>
                                                        <input type="text" class="form-control text-center product-qty" value="0"
                                                               data-price="@item.Price"
                                                               data-currency-id="@item.CurrencyTypeId"
                                                               data-currency-symbol="@item.CurrencyTypeSymbol" />
                                                        <button class="btn btn-icon btn-light input-group-text product-quantity-plus"><i class="ri-add-line"></i></button>
                                                    </div>
                                                </td>
                                                <td class="product-total">0.00</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Summary Section -->
                <div class="col-xxl-3">
                    <div class="card custom-card">
                        <div class="card-body p-0">
                            <div class="p-3 border-bottom border-block-end-dashed">
                                <div class="input-group mb-1">
                                    <input id="coupon-code" type="text" class="form-control form-control-sm" placeholder="@Localizer["productSale.INDEX.COUPON_CODE"]">
                                    <button id="apply-coupon" class="btn btn-primary input-group-text">@Localizer["productSale.INDEX.APPLY"]</button>
                                </div>
                                <a id="coupon-description" href="javascript:void(0);" class="fs-12 text-success d-none"></a>
                            </div>

                            <div class="p-3 border-bottom border-block-end-dashed">
                                <div class="d-flex justify-content-between mb-3">
                                    <span class="text-muted">@Localizer["productSale.INDEX.SUBTOTAL"]</span>
                                    <span id="subtotal" class="fw-medium">0.00</span>
                                </div>
                                <div class="d-flex justify-content-between mb-3">
                                    <span class="text-muted">@Localizer["productSale.INDEX.DISCOUNT"]</span>
                                    <span id="discount" class="text-success fw-medium">- 0.00</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span class="text-muted">@Localizer["productSale.INDEX.AMOUNT_TO_BE_PAID"]</span>
                                    <span id="grand-total" class="fw-bold text-primary">0.00</span>
                                </div>
                            </div>
                            <div class="p-3 d-grid">
                                <button id="checkout-button" class="btn btn-primary btn-wave mb-2">@Localizer["productSale.INDEX.PROCEED_TO_CHECKOUT"]</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedCurrencyId = null;
        let currentDiscount = 0;
        window.selectedCampaignId = null;

        function calculateCart() {
            let subtotal = 0;
            document.querySelectorAll('.product-qty').forEach(function (input) {
                const price = parseFloat(input.dataset.price);
                const qty = parseInt(input.value) || 0;
                const total = price * qty;
                input.closest('tr').querySelector('.product-total').textContent = `${total.toFixed(2)}`;
                subtotal += total;
            });

            let finalTotal = subtotal - currentDiscount;
            if (finalTotal < 0) finalTotal = 0;

            document.getElementById('subtotal').textContent = `${subtotal.toFixed(2)}`;
            document.getElementById('discount').textContent = `- ${currentDiscount.toFixed(2)}`;
            document.getElementById('grand-total').textContent = `${finalTotal.toFixed(2)}`;
        }

        function getProductData() {
            const data = [];
            const rows = document.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const productId = parseInt(row.getAttribute("data-product-id"));
                const qtyInput = row.querySelector('.product-qty');
                const price = parseFloat(qtyInput.dataset.price);
                const currencyTypeId = parseInt(qtyInput.dataset.currencyId);
                const quantity = parseInt(qtyInput.value) || 0;
                if (quantity > 0) {
                    data.push({ productId, price, quantity, currencyTypeId });
                }
            });
            return data;
        }

        async function postProductData() {
            const data = getProductData();
            const campaignId = window.selectedCampaignId || null;

            const subtotal = parseFloat(document.getElementById('subtotal').textContent) || 0;
            const discount = currentDiscount || 0;
            const finalTotal = parseFloat(document.getElementById('grand-total').textContent) || subtotal;

            const payload = {
                campaignId: campaignId,
                subTotal: subtotal,
                discountAmount: discount,
                finalTotal: finalTotal,
                items: data
            };

            const response = await fetch('/ProductSaleCheckOut/Submit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.isSuccess) {
                    redirectWithCulture(`/ProductSaleCheckOut/Index?productSaleId=${result.productSaleId}&campaignId=${campaignId || ''}&subTotal=${subtotal}&discount=${discount}&finalTotal=${finalTotal}`);
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: '@Localizer["productSale.INDEX.WARNING_TITLE"]',
                        html: result.message || "@Localizer["productSale.INDEX.UNKNOWN_ERROR"]",
                        confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                    });
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: '@Localizer["productSale.INDEX.SERVER_ERROR"]',
                    text: '@Localizer["productSale.INDEX.SERVER_ERROR_TEXT"]',
                    confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Apply coupon
            document.getElementById('apply-coupon').addEventListener('click', async function () {
                const data = getProductData();
                if (data.length === 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: '@Localizer["productSale.INDEX.WARNING_TITLE"]',
                        text: '@Localizer["productSale.INDEX.EMPTY_CART_COUPON"]',
                        confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                    });
                    return;
                }

                const couponCode = document.getElementById('coupon-code').value.trim();
                if (!couponCode) {
                    Swal.fire({
                        icon: 'warning',
                        title: '@Localizer["productSale.INDEX.WARNING_TITLE"]',
                        text: '@Localizer["productSale.INDEX.EMPTY_COUPON"]',
                        confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                    });
                    return;
                }

                const response = await fetch('/ProductSale/ValidateCoupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode, products: data })
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.isSuccess) {
                        currentDiscount = result.discount || 0;
                        window.selectedCampaignId = result.campaignId || null;
                        document.getElementById('coupon-description').textContent = result.message;
                        document.getElementById('coupon-description').classList.remove("d-none");
                    } else {
                        currentDiscount = 0;
                        window.selectedCampaignId = null;
                        document.getElementById('coupon-description').textContent = "";
                        document.getElementById('coupon-description').classList.add("d-none");
                        Swal.fire({
                            icon: 'warning',
                            title: '@Localizer["productSale.INDEX.WARNING_TITLE"]',
                            text: result.message,
                            confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                        });
                    }
                    calculateCart();
                }
            });

            // Quantity events
            document.querySelectorAll('.product-quantity-plus').forEach(btn =>
                btn.addEventListener('click', function () {
                    const input = this.parentElement.querySelector('.product-qty');
                    const currentCurrencyId = parseInt(input.dataset.currencyId);

                    if (selectedCurrencyId === null && parseInt(input.value) === 0) {
                        selectedCurrencyId = currentCurrencyId;
                    }

                    if (selectedCurrencyId !== null && selectedCurrencyId !== currentCurrencyId) {
                        Swal.fire({
                            icon: 'warning',
                            title: '@Localizer["productSale.INDEX.CURRENCY_RESTRICTION_TITLE"]',
                            text: '@Localizer["productSale.INDEX.CURRENCY_RESTRICTION_TEXT"]',
                            confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                        });
                        return;
                    }

                    input.value = parseInt(input.value) + 1;
                    calculateCart();
                })
            );

            document.querySelectorAll('.product-quantity-minus').forEach(btn =>
                btn.addEventListener('click', function () {
                    const input = this.parentElement.querySelector('.product-qty');
                    input.value = Math.max(0, parseInt(input.value) - 1);

                    const totalQty = Array.from(document.querySelectorAll('.product-qty'))
                        .map(i => parseInt(i.value) || 0)
                        .reduce((a, b) => a + b, 0);

                    if (totalQty === 0) {
                        selectedCurrencyId = null;
                    }

                    calculateCart();
                })
            );

            document.querySelectorAll('.product-qty').forEach(input => {
                input.addEventListener('input', function () {
                    this.value = this.value.replace(/[^0-9]/g, '');
                });

                input.addEventListener('change', function () {
                    const qty = parseInt(this.value) || 0;
                    const currentCurrencyId = parseInt(this.dataset.currencyId);

                    if (qty > 0) {
                        if (selectedCurrencyId === null) {
                            selectedCurrencyId = currentCurrencyId;
                        } else if (selectedCurrencyId !== currentCurrencyId) {
                            this.value = 0;
                            Swal.fire({
                                icon: 'warning',
                                title: '@Localizer["productSale.INDEX.CURRENCY_RESTRICTION_TITLE"]',
                                text: '@Localizer["productSale.INDEX.CURRENCY_RESTRICTION_TEXT"]',
                                confirmButtonText: '@Localizer["productSale.INDEX.CONFIRM_BUTTON"]',
                            });
                        }
                    }

                    calculateCart();
                });

                input.addEventListener('keyup', calculateCart);
            });

            document.getElementById('checkout-button').addEventListener('click', postProductData);

            calculateCart();
        });
    </script>
}
