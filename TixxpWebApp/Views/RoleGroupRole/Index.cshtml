@using Tixxp.Entities.RoleGroupRole
@model List<RoleGroupRoleEntity>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Role Group & Rol Atamaları";
}

<div class="main-content app-content">
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" onclick="openNewRoleGroupRoleModal()">+ Yeni Role Group Role Ekle</button>
    </div>
    <div class="container mt-4">
        <div class="row justify-content-center">
            <!-- SOL: RoleGroup Listesi -->
            <div class="col-md-5 mb-4">
                <div class="card shadow rounded">
                    <div class="card-header bg-primary text-dark fw-bold">🎯 Role Group Listesi</div>
                    <div class="card-body p-2">
                        @if (Model.Select(x => x.RoleGroup).DistinctBy(x => x.Id).Any())
                        {
                            <ul class="list-group">
                                @foreach (var group in Model.Select(x => x.RoleGroup).DistinctBy(x => x.Id))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span class="fw-medium">@group.Name</span>
                                        <button class="btn btn-sm btn-outline-primary" onclick="showRoles(@group.Id)">Rolleri Göster</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="alert alert-warning mb-0">Herhangi bir Role Group bulunamadı.</div>
                        }
                    </div>
                </div>
            </div>

            <!-- SAĞ: Role Listesi -->
            <div class="col-md-7 mb-4">
                <div class="card shadow rounded">
                    <div class="card-header bg-secondary text-dark fw-bold">🛠️ Seçilen Role Group'un Rolleri</div>
                    <div class="card-body">
                        <ul id="roleList" class="list-group">
                            <li class="list-group-item text-muted">Bir Role Group seçiniz...</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="newRoleGroupRoleModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title">Yeni Role Group Role Ekle</h5>
                <button class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="newRoleGroupRoleForm">
                    <div class="mb-3">
                        <label>Role Group Seç</label>
                        <select class="form-select" id="newRoleGroupId" required></select>
                    </div>
                    <div class="row" id="allRoleList"></div>
                    <button type="submit" class="btn btn-success w-100 mt-3">Kaydet</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const allData = @Html.Raw(Json.Serialize(Model));

        function showRoles(roleGroupId) {
            const roleList = document.getElementById("roleList");
            roleList.innerHTML = '';

            const matched = allData.filter(x => x.roleGroupId === roleGroupId);

            if (matched.length === 0) {
                roleList.innerHTML = '<li class="list-group-item text-muted">Bu gruba atanmış rol bulunamadı.</li>';
                return;
            }

            matched.forEach(item => {
                const li = document.createElement("li");
                li.className = "list-group-item";
                li.textContent = item.role.name;
                roleList.appendChild(li);
            });
        }

        function openNewRoleGroupRoleModal() {
            $('#newRoleGroupId').empty();
            $('#allRoleList').empty();

            $.get('/RoleGroupRole/GetUnassignedRoleGroupsAndAllRoles', function (res) {
                if (!res.success) {
                    Swal.fire("Hata", "Veriler alınamadı.", "error");
                    return;
                }

                const roleGroups = res.roleGroups;
                const roles = res.roles;

                if (roleGroups.length === 0) {
                    Swal.fire("Uyarı", "Tüm Role Group'lara rol atanmış durumda.", "info");
                    return;
                }

                // RoleGroup doldur
                roleGroups.forEach(rg => {
                    $('#newRoleGroupId').append(`<option value="${rg.id}">${rg.name}</option>`);
                });

                // Roller listeleniyor
                roles.forEach(role => {
                    const checkbox = `
                        <div class="col-md-4 mb-2">
                            <label><input type="checkbox" name="roles" value="${role.id}" /> ${role.name}</label>
                        </div>`;
                    $('#allRoleList').append(checkbox);
                });

                $('#newRoleGroupRoleModal').modal('show');
            });
        }

        $('#newRoleGroupRoleForm').submit(function (e) {
            e.preventDefault();
            const roleGroupId = $('#newRoleGroupId').val();
            const selectedRoleIds = $('input[name="roles"]:checked').map(function () {
                return parseInt($(this).val());
            }).get();

            if (selectedRoleIds.length === 0) {
                Swal.fire("Hata", "Lütfen en az bir rol seçin.", "warning");
                return;
            }

            $.ajax({
                url: '/RoleGroupRole/AssignRoles',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ roleGroupId: parseInt(roleGroupId), roleIds: selectedRoleIds }),
                success: function (res) {
                    if (res.success) {
                        Swal.fire("Başarılı", res.message, "success").then(() => location.reload());
                    } else {
                        Swal.fire("Hata", res.message, "error");
                    }
                }
            });
        });
    </script>
}

